@{
    ViewData["Title"] = "Domains & Subdomains";
}

<style>
    body {
        background-color: #121212;
        color: white;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 20px;
    }

    .main-container {
        max-width: 95%;
        margin: 0 auto;
    }

    .table-container {
        width: 100%;
        margin: auto;
        overflow-x: auto;
        background-color: #1e1e1e;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }

    h2 {
        text-align: center;
        margin-bottom: 25px;
        color: #4CAF50;
        font-size: 28px;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        background-color: white;
        color: #333;
        table-layout: fixed;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    th, td {
        padding: 12px 15px;
        border: 1px solid #ddd;
        text-align: left;
        word-wrap: break-word;
        vertical-align: top;
    }

    th {
        background-color: #2c3e50;
        color: white;
        text-align: center;
        font-weight: 600;
        position: sticky;
        top: 0;
        text-transform: uppercase;
        font-size: 14px;
        letter-spacing: 0.5px;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    tr:hover {
        background-color: #f1f1f1;
    }

    .filter-container {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 25px;
        padding: 20px;
        background-color: #2c3e50;
        border-radius: 8px;
        align-items: center;
    }

    input, select {
        padding: 12px 15px;
        font-size: 14px;
        width: 100%;
        max-width: 300px;
        border-radius: 6px;
        border: 1px solid #444;
        background-color: #34495e;
        color: white;
        transition: all 0.3s;
    }

        input:focus, select:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
        }

        input::placeholder {
            color: #bbb;
        }

    .record-count {
        margin: 20px 0;
        font-weight: bold;
        text-align: right;
        font-size: 16px;
        color: #4CAF50;
    }

    .add-record-container {
        margin: 30px 0;
        padding: 25px;
        background: #2c3e50;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

        .add-record-container h3 {
            margin-top: 0;
            margin-bottom: 20px;
            color: #4CAF50;
            font-size: 20px;
        }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .add-record-container input,
    .add-record-container select {
        width: 100%;
        margin-bottom: 0;
        padding: 12px;
        background-color: #34495e;
    }

    .button-container {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .btn {
        padding: 12px 25px;
        border: none;
        cursor: pointer;
        font-weight: 600;
        border-radius: 6px;
        font-size: 16px;
        transition: all 0.3s;
    }

    .add-btn {
        background-color: #4CAF50;
        color: white;
    }

        .add-btn:hover {
            background-color: #45a049;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }

    @@media screen and (max-width: 1200px) {
        .form-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    @@media screen and (max-width: 992px) {
        .form-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        th, td {
            padding: 10px 12px;
        }
    }

    @@media screen and (max-width: 768px) {
        .filter-container {
            flex-direction: column;
            align-items: stretch;
            gap: 15px;
        }

        input, select {
            max-width: 100%;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        th, td {
            font-size: 14px;
            padding: 8px 10px;
        }

        h2 {
            font-size: 24px;
        }
    }

    @@media screen and (max-width: 576px) {
        .table-container {
            padding: 15px;
        }

        .add-record-container {
            padding: 20px;
        }
    }
</style>

<div class="main-container">
    <div class="table-container">
        <h2>Domains & Subdomains Management</h2>

        <div class="filter-container">
            <input type="text" id="searchDomain" placeholder="Search Domain or CIP Number...">
            <select id="awardLevelFilter">
                <option value="">All Award Levels</option>
                <option value="Bachelors">Bachelors</option>
                <option value="Masters">Masters</option>
                <option value="Doctorate">Doctorate</option>
                <option value="PhD">PhD</option>
                <option value="Grad Certificate">Grad Certificate</option>
            </select>
        </div>

        <div class="add-record-container">
            <h3>Add New Record</h3>
            <div class="form-grid" id="newRecordForm">
                <input type="text" id="newDomain" placeholder="Domain (Gen Field of Study)">
                <input type="text" id="newDomainCIP" placeholder="Domain CIP (2-digit)">
                <input type="text" id="newSubdomain" placeholder="Subdomain (Field of Study)">
                <input type="text" id="newSubdomainCIP" placeholder="Subdomain CIP (6-code)">
                <input type="text" id="newRegistrarCIP" placeholder="Registrar CIP (6-code)">
                <input type="text" id="newRegistrarCIPName" placeholder="Registrar CIP Name (NCES)">
                <input type="text" id="newNUAcademicProgram" placeholder="NU Academic Program">
                <input type="text" id="newNUMajorTranscript" placeholder="NU Major Transcript">
                <input type="text" id="newNUProgramCode" placeholder="NU Program Code">
                <input type="text" id="newCollege" placeholder="College">
                <select id="newAwardLevel">
                    <option value="">Select Award Level</option>
                    <option value="Bachelors">Bachelors</option>
                    <option value="Masters">Masters</option>
                    <option value="Doctorate">Doctorate</option>
                    <option value="PhD">PhD</option>
                    <option value="Grad Certificate">Grad Certificate</option>
                </select>
            </div>
            <div class="button-container">
                <button class="btn add-btn" onclick="addNewRecord()">Add Record</button>
            </div>
        </div>

        <div class="table-responsive">
            <table id="data-table">
                <thead>
                    <tr>
                        <th style="width: 180px;">Domain (Gen Field of Study)</th>
                        <th style="width: 100px;">Domain CIP (2-digit)</th>
                        <th style="width: 180px;">Subdomain (Field of Study)</th>
                        <th style="width: 140px;">Subdomain CIP (6-code)</th>
                        <th style="width: 140px;">Registrar CIP (6-code)</th>
                        <th style="width: 200px;">Registrar CIP Name (NCES)</th>
                        <th style="width: 180px;">NU Academic Program</th>
                        <th style="width: 150px;">NU Major Transcript</th>
                        <th style="width: 120px;">NU Program Code</th>
                        <th style="width: 120px;">College</th>
                        <th style="width: 120px;">Award Level</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Data will be inserted here -->
                </tbody>
            </table>
        </div>

        <div class="record-count" id="recordCount">Total Records: 0</div>
    </div>
</div>

<script>document.addEventListener("DOMContentLoaded", function () {
        const googleSheetUrl = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQPuwyA7M7cfpHWuYNdgRyJtvAXk2HYUCKVU9cRP8SANZB1pU862AkRf7034iHpb48qfLPWLdNsb6Ch/pub?output=csv";

        fetch(googleSheetUrl)
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.text();
            })
            .then(csvData => {
                const rows = parseCSV(csvData);
                const tbody = document.querySelector("#data-table tbody");
                tbody.innerHTML = ''; // Clear existing rows

                if (rows.length > 1) {
                    for (let i = 1; i < rows.length; i++) {
                        addRowToTable(rows[i]);
                    }
                    updateRecordCount();
                } else {
                    document.getElementById("recordCount").textContent = "No records found";
                }
            })
            .catch(error => {
                console.error("Error fetching data:", error);
                document.getElementById("recordCount").textContent = "Error loading data";
            });

        document.getElementById("searchDomain").addEventListener("input", filterTable);
        document.getElementById("awardLevelFilter").addEventListener("change", filterTable);
    });

    // Improved CSV parsing that handles quoted fields with commas
    function parseCSV(csvData) {
        const lines = csvData.trim().split("\n");
        return lines.map(line => {
            // Match either quoted fields or non-comma sequences
            return line.match(/(".*?"|[^",]+)(?=\s*,|\s*$)/g) || [];
        });
    }

    function addRowToTable(data) {
        const tbody = document.querySelector("#data-table tbody");
        let tr = document.createElement("tr");

        data.forEach((cell, index) => {
            let td = document.createElement("td");
            // Remove quotes if they exist
            let cellContent = cell.trim().replace(/^"(.*)"$/, '$1');
            td.textContent = cellContent || '-';

            // Add data attributes for filtering
            if (index === 0) td.dataset.domain = cellContent.toLowerCase();
            if (index === 1) td.dataset.domainCip = cellContent.toLowerCase();
            if (index === 10) td.dataset.awardLevel = cellContent.toLowerCase();

            tr.appendChild(td);
        });

        tbody.appendChild(tr);
    }

    function addNewRecord() {
        let newRecord = [
            document.getElementById("newDomain").value,
            document.getElementById("newDomainCIP").value,
            document.getElementById("newSubdomain").value,
            document.getElementById("newSubdomainCIP").value,
            document.getElementById("newRegistrarCIP").value,
            document.getElementById("newRegistrarCIPName").value,
            document.getElementById("newNUAcademicProgram").value,
            document.getElementById("newNUMajorTranscript").value,
            document.getElementById("newNUProgramCode").value,
            document.getElementById("newCollege").value,
            document.getElementById("newAwardLevel").value
        ];

        if (newRecord.some(field => !field.trim())) {
            alert("Please fill in all fields.");
            return;
        }

        addRowToTable(newRecord);
        updateRecordCount();
        clearForm();
        filterTable(); // Apply current filters to the new record
    }

    function clearForm() {
        document.querySelectorAll("#newRecordForm input").forEach(input => {
            input.value = "";
        });
        document.getElementById("newAwardLevel").value = "";
    }

    function filterTable() {
        const searchTerm = document.getElementById("searchDomain").value.toLowerCase().trim();
        const awardLevelFilter = document.getElementById("awardLevelFilter").value.toLowerCase();
        const rows = document.querySelectorAll("#data-table tbody tr");

        let visibleCount = 0;

        rows.forEach(row => {
            const domainCell = row.cells[0];
            const domainCipCell = row.cells[1];
            const awardLevelCell = row.cells[10];

            const domainMatch = domainCell.textContent.toLowerCase().includes(searchTerm) ||
                domainCipCell.textContent.toLowerCase().includes(searchTerm);

            const awardLevelMatch = awardLevelFilter === '' ||
                awardLevelCell.textContent.toLowerCase() === awardLevelFilter;

            if (domainMatch && awardLevelMatch) {
                row.style.display = "";
                visibleCount++;
            } else {
                row.style.display = "none";
            }
        });

        document.getElementById("recordCount").textContent = `Total Records: ${visibleCount}`;
    }

    function updateRecordCount() {
        const visibleRows = document.querySelectorAll("#data-table tbody tr:not([style*='display: none'])");
        document.getElementById("recordCount").textContent = `Total Records: ${visibleRows.length}`;
    }</script>